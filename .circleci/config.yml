version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.3

default-node-image: &default-node-image
  docker:
    - image: circleci/node:13.8.0

default-aws-image: &default-aws-image
  docker:
    - image: amazon/aws-cli

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowid:
        description: id of workflow to allow destroying right stack
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflowid >> --recursive
            aws cloudformation delete-stack --stack-name=udapeople-backend-<< parameters.workflowid >>
            aws cloudformation delete-stack --stack-name=udapeople-frontend-<< parameters.workflowid >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowid:
        description: id of workflow to allow destroying right stack
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/XesWz76VWDCbyM6UrsWUPj/migration_<< parameters.workflowid >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: run frontend tests
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: run backend tests
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: scan frontend for vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: scan backend for vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
      
  deploy-infrastructure:
    <<: *default-aws-image
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10.6
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - checkout
      - add_ssh_keys:
          fingerprints: ["92:d9:9f:32:a4:f1:11:c6:4a:1c:84:78:87:fb:9e:db"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip
            sudo apt-get install python3-pip
            sudo pip3 install ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    <<: *default-node-image
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/XesWz76VWDCbyM6UrsWUPj/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: cimg/python:3.10.6
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - checkout
      - restore_cache:
          key: frontend-build      
      - run:
          name: Uppgrade default packages
          command: sudo apt update
      - run:
          name: Install Node & NPM
          command: |
            sudo apt install nodejs
            sudo apt install npm
      - run:
          name: Install ansible
          command: |
            sudo apt-get install python3-pip
            sudo pip3 install ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress[0][0]' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" 
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      - run:
          name: Deploy frontend
          command: |
            cd frontend
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive    
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: cimg/python:3.10.6
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - checkout
      - restore_cache:
          key: backend-build
      - add_ssh_keys:
          fingerprints: ["92:d9:9f:32:a4:f1:11:c6:4a:1c:84:78:87:fb:9e:db"]
      - attach_workspace:
          at: ~/
      - run:
          name: Uppgrade default packages
          command: sudo apt update
      - run:
          name: Install ansible
          command: |
            sudo apt-get install python3-pip
            sudo pip3 install ansible      
      - run:
          name: Install Node & NPM
          command: |
            sudo apt install nodejs
            sudo apt install npm
      - run:
          name: Zip up artifact
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
      - run:
          name: move tar to deploy files directory
          command: mv artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: run deployment play
          command: |
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml           
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --update nodejs npm
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(tail -1 .circleci/ansible/inventory.txt)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    <<: *default-node-image
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - checkout
      - run:
          name: Store old workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo ${OldWorkFlowID} >> ./OldWorkFlowID.txt
      - save_cache:
          paths: [/home/OldWorkFlowID.txt]
          key: old-workflow-id-3
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    <<: *default-node-image
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - checkout
      - restore_cache:
          key: old-workflow-id-3
      - run:
          name: list cached file
          command: |
            ls -a
            cd /home
            ls -a
      - run:
          name: Get old stack workflow id
          command: |
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkFlowId=$(cat /home/OldWorkFlowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Stack names: "${STACKS[@]}
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [deploy-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [run-migrations, deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
