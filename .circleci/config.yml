version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.3

default-node-image: &default-node-image
  docker:
    - image: circleci/node:13.8.0

default-aws-image: &default-aws-image
  docker:
    - image: amazon/aws-cli

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowid:
        description: id of workflow to allow destroying right stack
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name=udapeople-backend-<< parameters.workflowid >>
            aws cloudformation delete-stack --stack-name=udapeople-frontend-<< parameters.workflowid >>
jobs:
  build-frontend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: run frontend tests
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: run backend tests
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: scan frontend for vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    <<: *default-node-image
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: scan backend for vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
      
  deploy-infrastructure:
    <<: *default-aws-image
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    executor: aws-cli/default
    docker:
      - image: cimg/python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["92:d9:9f:32:a4:f1:11:c6:4a:1c:84:78:87:fb:9e:db"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          
          command: |
            apt update 
            e
            aws --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
